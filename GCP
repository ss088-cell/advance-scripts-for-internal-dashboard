function filterAndCreateSheets() {
  var sourceSheetId = 'YOUR_SOURCE_SHEET_ID'; // Replace with your source sheet ID
  var targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet(); // Get the active spreadsheet (GCP Count)
  
  // Open source spreadsheet and the 'Detail Data' sheet
  var sourceSpreadsheet = SpreadsheetApp.openById(sourceSheetId);
  var sourceSheet = sourceSpreadsheet.getSheetByName('Detail Data');
  
  // Get all data from the source sheet
  var data = sourceSheet.getDataRange().getValues();
  
  // Get headers
  var headers = data[0];
  
  // Find the column indices for Location and VPR
  var locationColumnIndex = headers.indexOf('Location');
  var vprColumnIndex = headers.indexOf('VPR');
  
  // Define the values to filter by
  var locationsToFilter = ['Google Central 1', 'Google East 1', 'Googe East 1']; // No autocorrection for 'Googe East 1'
  var vprValues = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW'];
  
  // Create sheets in the target spreadsheet for each VPR value
  vprValues.forEach(function(vprValue) {
    // Create the sheet or clear it if it already exists
    var sheetName = vprValue + ' COUNT';
    var targetSheet = targetSpreadsheet.getSheetByName(sheetName);
    if (!targetSheet) {
      targetSheet = targetSpreadsheet.insertSheet(sheetName);
    } else {
      targetSheet.clear(); // Clear existing data if the sheet already exists
    }

    // Add headers to the new sheet
    targetSheet.appendRow(headers);
    
    // Filter and copy data to the corresponding sheet
    data.slice(1).forEach(function(row) {
      var location = row[locationColumnIndex];
      var vpr = row[vprColumnIndex];
      
      // Check if the row matches the filter criteria
      if (locationsToFilter.indexOf(location) !== -1 && vpr === vprValue) {
        targetSheet.appendRow(row);
      }
    });
  });
}

function aged() {
  var sourceSheetId = 'YOUR_SOURCE_SHEET_ID'; // Replace with your source sheet ID
  var targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet(); // Get the active spreadsheet (GCP Count)
  
  // Open source spreadsheet and the 'Detail Data' sheet
  var sourceSpreadsheet = SpreadsheetApp.openById(sourceSheetId);
  var sourceSheet = sourceSpreadsheet.getSheetByName('Detail Data');
  
  // Get all data from the source sheet
  var data = sourceSheet.getDataRange().getValues();
  
  // Get headers
  var headers = data[0];
  
  // Find the column indices for Location and Risk Type
  var locationColumnIndex = headers.indexOf('Location');
  var riskTypeColumnIndex = headers.indexOf('Risk Type');
  
  // Define the values to filter by
  var locationsToFilter = ['Google Central 1', 'Google East 1', 'Googe East 1']; // No autocorrection for 'Googe East 1'
  var riskTypes = ['Aged', 'Within Tolerance', 'Risk Treatment Plan'];
  
  // Create sheets in the target spreadsheet for each Risk Type
  riskTypes.forEach(function(riskType) {
    // Create the sheet or clear it if it already exists
    var sheetName = riskType + ' Count';
    var targetSheet = targetSpreadsheet.getSheetByName(sheetName);
    if (!targetSheet) {
      targetSheet = targetSpreadsheet.insertSheet(sheetName);
    } else {
      targetSheet.clear(); // Clear existing data if the sheet already exists
    }

    // Add headers to the new sheet
    targetSheet.appendRow(headers);
    
    // Filter and copy data to the corresponding sheet
    data.slice(1).forEach(function(row) {
      var location = row[locationColumnIndex];
      var riskTypeValue = row[riskTypeColumnIndex];
      
      // Check if the row matches the filter criteria
      if (locationsToFilter.indexOf(location) !== -1 && riskTypeValue === riskType) {
        targetSheet.appendRow(row);
      }
    });
  });
}
function New() {
  var sourceSheetId = 'YOUR_SOURCE_SHEET_ID'; // Replace with your source sheet ID
  var targetSpreadsheet = SpreadsheetApp.getActiveSpreadsheet(); // Get the active spreadsheet (GCP Count)
  
  // Open the source spreadsheet and the two sheets (Detail Data and Last Week Data)
  var sourceSpreadsheet = SpreadsheetApp.openById(sourceSheetId);
  var detailDataSheet = sourceSpreadsheet.getSheetByName('Detail Data');
  var lastWeekDataSheet = sourceSpreadsheet.getSheetByName('Last Week Data');
  
  // Get all data from both sheets
  var detailData = detailDataSheet.getDataRange().getValues();
  var lastWeekData = lastWeekDataSheet.getDataRange().getValues();
  
  // Get headers
  var detailDataHeaders = detailData[0];
  var lastWeekDataHeaders = lastWeekData[0];
  
  // Find the column indices for Location and Unique Identifier w Repository & Port
  var locationColumnIndex = detailDataHeaders.indexOf('Location');
  var uniqueIdentifierColumnIndex = detailDataHeaders.indexOf('Unique Identifier w Repository & Port');
  
  // Define the values to filter by
  var locationsToFilter = ['Google Central 1', 'Google East 1', 'Googe East 1']; // No autocorrection for 'Googe East 1'
  
  // Extract Unique Identifiers from both sheets
  var detailDataUniqueIdentifiers = detailData.slice(1).map(row => row[uniqueIdentifierColumnIndex]);
  var lastWeekDataUniqueIdentifiers = lastWeekData.slice(1).map(row => row[uniqueIdentifierColumnIndex]);
  
  // Create sheets for New, Closed, and Unpatched
  var newSheet = createOrClearSheet(targetSpreadsheet, 'New Count');
  var closedSheet = createOrClearSheet(targetSpreadsheet, 'Closed Count');
  var unpatchedSheet = createOrClearSheet(targetSpreadsheet, 'Unpatched Count');
  
  // Append headers to the new sheets
  newSheet.appendRow(detailDataHeaders);
  closedSheet.appendRow(detailDataHeaders);
  unpatchedSheet.appendRow(detailDataHeaders);
  
  // Compare the Unique Identifiers
  detailData.slice(1).forEach(function(row) {
    var location = row[locationColumnIndex];
    var uniqueIdentifier = row[uniqueIdentifierColumnIndex];
    
    // Check if the location matches and compare Unique Identifiers
    if (locationsToFilter.indexOf(location) !== -1) {
      if (lastWeekDataUniqueIdentifiers.indexOf(uniqueIdentifier) === -1) {
        // If present in Detail Data but not in Last Week Data -> New
        newSheet.appendRow(row);
      } else {
        // If present in both -> Unpatched
        unpatchedSheet.appendRow(row);
      }
    }
  });
  
  lastWeekData.slice(1).forEach(function(row) {
    var location = row[locationColumnIndex];
    var uniqueIdentifier = row[uniqueIdentifierColumnIndex];
    
    // Check if the location matches and compare Unique Identifiers
    if (locationsToFilter.indexOf(location) !== -1) {
      if (detailDataUniqueIdentifiers.indexOf(uniqueIdentifier) === -1) {
        // If present in Last Week Data but not in Detail Data -> Closed
        closedSheet.appendRow(row);
      }
    }
  });
}

// Helper function to create a sheet or clear it if it already exists
function createOrClearSheet(spreadsheet, sheetName) {
  var sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
  } else {
    sheet.clear(); // Clear existing data if the sheet already exists
  }
  return sheet;
}
